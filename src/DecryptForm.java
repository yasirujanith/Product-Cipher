
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.util.ArrayList;
import javax.swing.JFileChooser;
import javax.swing.filechooser.FileSystemView;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author desmond
 */
public class DecryptForm extends javax.swing.JFrame {
    JFileChooser fileChooser;
    String filePath, fileName, encrypted_text, decrypted_text, key;
    ArrayList space_indices;
    ArrayList newline_indices;
    String original_alphabet[], alphabet[];
    String substitution_key;
    
    /**
     * Creates new form EncryptForm
     */
    public DecryptForm() {
        initComponents();
        fileChooser = new JFileChooser(FileSystemView.getFileSystemView().getHomeDirectory());
        space_indices = new ArrayList();
        newline_indices=new ArrayList();
        decrypted_text = "";
        encrypted_text = "";
        key="";
        //keyText.setText("XEazoftSwc21033yA11Fg22Dj36@qA5aW17sB29");
        original_alphabet = new String[52];
        alphabet = new String[52];
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        inputText = new javax.swing.JTextArea();
        jLabel4 = new javax.swing.JLabel();
        keyText = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        decryptedText = new javax.swing.JTextArea();
        filepathText = new javax.swing.JTextField();
        filepathButton = new javax.swing.JButton();
        decryptKey = new javax.swing.JButton();
        jLabel6 = new javax.swing.JLabel();
        filepathText_save = new javax.swing.JTextField();
        filepathButton_Save = new javax.swing.JButton();
        saveButton = new javax.swing.JButton();
        jSeparator2 = new javax.swing.JSeparator();
        cancelButton = new javax.swing.JButton();
        backButton = new javax.swing.JButton();
        jSeparator3 = new javax.swing.JSeparator();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("DECRYPTION FORM");

        jLabel2.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jLabel2.setText("Choose the file to Decrypt :");

        jLabel3.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jLabel3.setText("Text File Contains :");

        inputText.setColumns(20);
        inputText.setRows(5);
        jScrollPane1.setViewportView(inputText);

        jLabel4.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jLabel4.setText("Decrytion Key :");

        jLabel5.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jLabel5.setText("Decrypted Text :");

        decryptedText.setColumns(20);
        decryptedText.setRows(5);
        jScrollPane2.setViewportView(decryptedText);

        filepathButton.setText("Choose");
        filepathButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                filepathButtonActionPerformed(evt);
            }
        });

        decryptKey.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        decryptKey.setText("Decrypt Text");
        decryptKey.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                decryptKeyActionPerformed(evt);
            }
        });

        jLabel6.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jLabel6.setText("Choose where to save the encrypted file :");

        filepathButton_Save.setText("Choose");
        filepathButton_Save.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                filepathButton_SaveActionPerformed(evt);
            }
        });

        saveButton.setText("Save");
        saveButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveButtonActionPerformed(evt);
            }
        });

        cancelButton.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        cancelButton.setText("Cancel");
        cancelButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelButtonActionPerformed(evt);
            }
        });

        backButton.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        backButton.setText("Back");
        backButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jSeparator2, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jScrollPane1)
                    .addComponent(jScrollPane2)
                    .addComponent(jLabel6, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(keyText)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel5)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(filepathText, javax.swing.GroupLayout.PREFERRED_SIZE, 346, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(filepathButton, javax.swing.GroupLayout.PREFERRED_SIZE, 77, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jLabel4))
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                                .addComponent(backButton, javax.swing.GroupLayout.PREFERRED_SIZE, 85, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(cancelButton, javax.swing.GroupLayout.PREFERRED_SIZE, 85, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                                .addComponent(filepathText_save, javax.swing.GroupLayout.PREFERRED_SIZE, 279, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(filepathButton_Save, javax.swing.GroupLayout.PREFERRED_SIZE, 77, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(saveButton, javax.swing.GroupLayout.PREFERRED_SIZE, 61, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(decryptKey, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 163, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addComponent(jSeparator3, javax.swing.GroupLayout.Alignment.TRAILING))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(filepathText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(filepathButton))
                .addGap(5, 5, 5)
                .addComponent(jLabel3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel4)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(keyText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(decryptKey, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(11, 11, 11)
                .addComponent(jSeparator3, javax.swing.GroupLayout.PREFERRED_SIZE, 9, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel5)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel6)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(filepathText_save, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(filepathButton_Save)
                    .addComponent(saveButton))
                .addGap(18, 18, 18)
                .addComponent(jSeparator2, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cancelButton, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(backButton, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void cancelButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelButtonActionPerformed
        this.dispose();
    }//GEN-LAST:event_cancelButtonActionPerformed

    private void filepathButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_filepathButtonActionPerformed
        int returnValue = fileChooser.showOpenDialog(null);
        if (returnValue == JFileChooser.APPROVE_OPTION) {
            File selectedFile = fileChooser.getSelectedFile();
            filePath = selectedFile.getAbsolutePath();
            filepathText.setText(filePath);
            inputText.setText("");
            try (BufferedReader br = new BufferedReader(new FileReader(filePath))) {
                String sCurrentLine;
                while ((sCurrentLine = br.readLine()) != null) {
                    inputText.append(sCurrentLine+"\n");
                    encrypted_text+=sCurrentLine;
                }
            } catch (IOException e) {
                    e.printStackTrace();
            }
        }
        //completeText += "\b";
    }//GEN-LAST:event_filepathButtonActionPerformed

    private void backButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backButtonActionPerformed
        new EncryptForm().setVisible(true);
        this.dispose();
    }//GEN-LAST:event_backButtonActionPerformed

    private void decryptKeyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_decryptKeyActionPerformed
        try {
            decryptedText.setText("");
            key = keyText.getText();
            System.out.println("Key : "+key);
            System.out.println("Encypted Text : "+encrypted_text);

            substitution_key = key.substring(0, 10);
            String permutation_key = key.substring(10, 14);
            String other_details = key.substring(17);
            String cutoff_count = key.substring(14, 15);

            String od_new = "";
            for(int i=0; i<other_details.length(); i++){
                if((int)(other_details.charAt(i))>64){
                    od_new += "#";
                }else{
                    od_new += other_details.charAt(i);
                }
            }
            System.out.println(od_new);
            String parts[]=od_new.split("@");
            System.out.println("space:"+parts[0].length());
            String space = parts[1];
            String temp = "";
            int count = 0;
            while(count < space.length()){
                if(space.charAt(count) == '#'){
                    count++;
                    temp="";
                    //System.out.println("#:"+count);
                }else{
                    temp += space.charAt(count);
                    while(true){
                        if(count+1 < space.length()){
                            if(space.charAt(count+1) != '#'){
                                count++;
                                temp += space.charAt(count);
                                //System.out.println("count: "+count);
                            }
                            else{
                                break;
                            }
                        }else{
                            break;
                        }
                    }
                    space_indices.add(Integer.parseInt(temp));
                    count++;
                    //System.out.println("!#: "+count);
                }
            }
            System.out.println("==spaces==");
            for(int i=0; i<space_indices.size(); i++){
                System.out.println(space_indices.get(i));
            }

            String newline = parts[0];
            temp = "";
            count = 0;
            while(count < newline.length()){
                if(newline.charAt(count) == '#'){
                    count++;
                    temp="";
                    //System.out.println("#:"+count);
                }else{
                    temp += newline.charAt(count);
                    while(true){
                        if(count+1 < newline.length()){
                            if(newline.charAt(count+1) != '#'){
                                count++;
                                temp += newline.charAt(count);
                                //System.out.println("count: "+count);
                            }
                            else{
                                break;
                            }
                        }else{
                            break;
                        }
                    }
                    newline_indices.add(Integer.parseInt(temp));
                    count++;
                    //System.out.println("!#: "+count);
                }
            }

            System.out.println("==newlines==");
            for(int i=0; i<newline_indices.size(); i++){
                System.out.println(newline_indices.get(i));
            }

            System.out.println("substitution_key: "+substitution_key);
            System.out.println("permutation_key: "+permutation_key);
            System.out.println("other_details: "+other_details);
            System.out.println("cutoff_count: "+cutoff_count);

            //assigning original alphabet
            int temp_count=0;
            for(int i=65; i<91; i++){
                original_alphabet[temp_count++]=Integer.toString(i);
            }
            for(int i=97; i<123; i++){
                original_alphabet[temp_count++]=Integer.toString(i);
            }
            System.out.println("=====original alphabet====");
            for(int i=0; i<52; i++){
                System.out.println(i+" : "+original_alphabet[i]);
                //System.out.print((char)Integer.parseInt(original_alphabet[i])+" ");
            }
            System.out.println(" ");

            //Generating the alphabet
            for(int i=0; i<10; i++){
                alphabet[i]=Integer.toString((int)(substitution_key.charAt(i)));
            }
            //System.out.println("hi: "+isInKey(69));
            int fill_count=10;
            int char_count=65;
            while(char_count<91){
                if(!isInKey(char_count)){
                    //System.out.println("new: "+char_count);
                    alphabet[fill_count++]=Integer.toString(char_count);                
                }
                char_count++;
            }
            char_count=97;
            while(char_count<123){
                if(!isInKey(char_count)){
                    //System.out.println("new: "+char_count);
                    alphabet[fill_count++]=Integer.toString(char_count);                
                }
                char_count++;
            }
    //        
            System.out.println("====alphabet====");
            for(int i=0; i<52; i++){
                System.out.println(i+" : "+alphabet[i]);
                //System.out.print((char)Integer.parseInt(alphabet[i])+" ");
            }
            System.out.println(" ");

            System.out.println("text length: "+encrypted_text.length());
            int division_count = encrypted_text.length()/4;
            String permuted_arr[][] = new String[division_count][4];
            temp_count = 0;
            for(int i=0; i<division_count; i++){
                for(int j=0; j<4; j++){
                    permuted_arr[i][j] = Integer.toString((int)(encrypted_text.charAt(temp_count++)));
                }
            }

            for(int i=0; i<division_count; i++){
                for(int j=0; j<4; j++){
                    System.out.print(permuted_arr[i][j]+" ");
                }
                System.out.println("");
            }

            System.out.println("Key : "+permutation_key);
            String permutation_arr[][] = new String[division_count][4];
            for(int i=0; i<division_count; i++){
                for(int j=0; j<4; j++){
                    int index = Integer.parseInt(Character.toString(permutation_key.charAt(j)));
                    permutation_arr[i][j] = permuted_arr[i][index];
                }
            }

            String permutation_arr_new[] = new String[encrypted_text.length()];
            temp_count = 0;
            for(int i=0; i<division_count; i++){
                for(int j=0; j<4; j++){
                    permutation_arr_new[temp_count++] = permutation_arr[i][j];
                }
            }

            System.out.println("==text without permutation==");
            for(int i=0; i<permutation_arr_new.length; i++){
                System.out.print(permutation_arr_new[i]+" ");
            }
            System.out.println("");

            //substitution process
            String original_text[] = new String[encrypted_text.length()];
            for(int i=0; i<permutation_arr_new.length; i++){
                int index = getIndex(alphabet, Integer.parseInt(permutation_arr_new[i]));
                original_text[i] = original_alphabet[index];
            }

            for(int i=0; i<space_indices.size(); i++){
                original_text[(int)(space_indices.get(i))] = "32";
            }
            for(int i=0; i<newline_indices.size(); i++){
                original_text[(int)(newline_indices.get(i))] = "10";
            }
            decrypted_text = "";
            for(int i=0; i<(original_text.length-Integer.parseInt(cutoff_count)); i++){
                decrypted_text += (char)Integer.parseInt(original_text[i]);
            }
            System.out.println(decrypted_text);
            decryptedText.setText(decrypted_text);
        }catch(Exception e){
            decryptedText.setText("Invalid key");
            System.out.println("invalid key");
        }
        
        
        
                
        
    }//GEN-LAST:event_decryptKeyActionPerformed

    private void filepathButton_SaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_filepathButton_SaveActionPerformed
        fileChooser.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
        int returnValue = fileChooser.showOpenDialog(null);
        if (returnValue == JFileChooser.APPROVE_OPTION) {
            File selectedFile = fileChooser.getSelectedFile();
            filePath = selectedFile.getAbsolutePath();
            filepathText_save.setText(filePath);
            fileName = filePath+"\\Decrypted_File.txt";
            System.out.println(fileName);
            
        }
    }//GEN-LAST:event_filepathButton_SaveActionPerformed

    private void saveButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveButtonActionPerformed
        try (BufferedWriter bw = new BufferedWriter(new FileWriter(fileName))) {
            String content = decrypted_text;
            bw.write(content);
            // no need to close it.
            //bw.close();
            System.out.println("Done");
        } catch (IOException e) {
                e.printStackTrace();
        }
    }//GEN-LAST:event_saveButtonActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(EncryptForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(EncryptForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(EncryptForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(EncryptForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new DecryptForm().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton backButton;
    private javax.swing.JButton cancelButton;
    private javax.swing.JButton decryptKey;
    private javax.swing.JTextArea decryptedText;
    private javax.swing.JButton filepathButton;
    private javax.swing.JButton filepathButton_Save;
    private javax.swing.JTextField filepathText;
    private javax.swing.JTextField filepathText_save;
    private javax.swing.JTextArea inputText;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JSeparator jSeparator2;
    private javax.swing.JSeparator jSeparator3;
    private javax.swing.JTextField keyText;
    private javax.swing.JButton saveButton;
    // End of variables declaration//GEN-END:variables
    
    public boolean isInKey(int value){
        boolean b=false;
        //System.out.println("value: "+value);
        for(int i=0; i<10; i++){
            //System.out.println(Character.toString(substitution_key.charAt(i))+" : "+Integer.toString(value));
            if((int)(substitution_key.charAt(i))==value){
                b=true;
            }
        }
        return b;
    }
    
    public int getIndex(String[] arr, int key){
        int index = -1;
        int char_value = key;
        
        for(int i=0; i<arr.length; i++){
           if(Integer.toString(char_value).equals(arr[i])){
               index=i;
               break;
           }      
        }
        return index;
    }
}
